./"manpage _printf
.TH man 3 "09 November 2022" "1.0" "_printf man page"

.SH NAME
_printf

.SH SYNOPSIS
#include “main.h”

int _printf(const char * format, …);

.SH DESCRIPTION
The functions of _printf produce output according to a format. The function writes the output under the control of a format string that specifies how subsequent arguments are converted for output.

Format of the format string
The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composedof zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and ends with a conversion specifier.

The overall syntax of a conversion specification is:

%conversion

The arguments must correspond properly (after type promotion) with the conversion specifier, and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).

Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.IP d, i
The int argument is converted to signed decimal notation.
.IP c
The int argument is converted to an unsigned char, and the resulting character is written.
.IP s
The const char * argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are written up to (but not including) a terminating null byte (‘\0').
.IP %
A '%' is written.  No argument is converted. The complete conversion specification is '%%'.

.SH RETURN VALUE
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).

.SH EXAMPLES

.SH SEE ALSO
.BR printf(1)

.SH BUGS
No known bugs.

.SH AUTHOR
Othmane Bengharbi

